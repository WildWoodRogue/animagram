import os
import setuptools
import telebot
import time
import random
from telebot import types
import emoji
activator=[1]
rus='–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—ã—ä—ç—é—è'
en=0
block =[]
bot = telebot.TeleBot('')
white=[5106244821]
counter_images=[0]
start_balance="15"
models=["darksuski","mixpro"]
# –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
queue_path="P:\\stable\\anima_queue.txt"
user_log_path="P:\\stable\\anima_user_log.txt"
prompt_path="P:\\stable\\anima_user_prompt.txt"
balance_path="P:\\stable\\anima_users_balance.txt"
print("GET")

# –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def add_balance(userID,count_balance):
    users_balances_lines=open(balance_path,"r")
    users_balances=users_balances_lines.readlines()
    users_balances_lines.close()
    users=[]
    balances=[]
    for i in users_balances:
        lines_user=i.split(",")
        users.append(lines_user[0])
        balances.append((lines_user[1])[:-1])
    if str(userID) not in users:
        users.append(str(userID))
        balances.append(start_balance)
    user_index=users.index(str(userID))
    balance=int(balances[user_index])
    balance+=count_balance
    balances[user_index]=str(balance)
    file_write_users=""
    for i in range(0,len(users)):
        file_write_users+=users[i]+","+balances[i]+"\n"
    users_balances_lines=open(balance_path,"w")
    users_balances_lines.write(file_write_users)
    users_balances_lines.close()

# –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
def referal_check(friendID,userID):
    users_balances_lines=open(balance_path,"r")
    users_balances=users_balances_lines.readlines()
    users_balances_lines.close()
    users=[]
    balances=[]
    for i in users_balances:
        lines_user=i.split(",")
        users.append(lines_user[0])
        balances.append((lines_user[1])[:-1])
    if str(userID) not in users:
        add_balance(friendID,15)

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def if_user_in_balance(userID):
    users_balances_lines=open(balance_path,"r")
    users_balances=users_balances_lines.readlines()
    users_balances_lines.close()
    users=[]
    balances=[]
    for i in users_balances:
        lines_user=i.split(",")
        users.append(lines_user[0])
        balances.append((lines_user[1])[:-1])
    if str(userID) not in users:
        users.append(str(userID))
        balances.append(start_balance)
    user_index=users.index(str(userID))
    balance=balances[user_index]
    #bot.send_message(message.chat.id, '–¢–≤–æ–π –±–∞–ª–∞–Ω—Å-'+balance)
    file_write_users=''
    for i in range(0,len(users)):
        file_write_users+=users[i]+","+balances[i]+"\n"
    users_balances_lines=open(balance_path,"w")
    users_balances_lines.write(file_write_users)
    users_balances_lines.close()


@bot.message_handler(commands=['start'])
def add_model(message):
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (—Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ), —á–µ–º —Ç–æ—á–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ - —Ç–µ–º –ª—É—á—à–µ \n–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ prompt, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π \n\n –ù–∞–ø—Ä–∏–º–µ—Ä "Orange hair girl with freckles"\n\nP.s —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ 10 –∞—Ä—Ç–æ–≤ –≤ –¥–µ–Ω—å\n\n–¢–∞–∫–∂–µ –µ—Å—Ç—å 2 —Å—Ç–∏–ª—è: darksushi, mixpro - –¥–æ–±–∞–≤—å –∏—Ö –≤ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—à—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ç–∞–∫–æ–º —Å—Ç–∏–ª–µ')
    keyboard=types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    alphaModel_button = types.KeyboardButton(text='mixpro')
    betaModel_button = types.KeyboardButton(text='darksushi')
    keyboard.add(alphaModel_button,betaModel_button)
    print(message.text.split())
    try:
        print(message.text.split())
        friendID=message.text.split()[1]
        friendID=int(friendID)
        print(friendID)
    except:
        print("hui")
        friendID=0
    if friendID!=0:
        referal_check(friendID,message.chat.id)
    if_user_in_balance(message.chat.id)
    msg=bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å", reply_markup=keyboard)
    bot.register_next_step_handler(msg, add_resolution,message.text)


@bot.message_handler(commands=['check'])
def check(m, res=False):
    print("00")
    users_balances_lines=open(balance_path,"r")
    users_balances=users_balances_lines.readlines()
    users=[]
    balances=[]
    for i in users_balances:
        lines_user=i.split(",")
        users.append(lines_user[0])
        balances.append((lines_user[1])[:-1])
    if str(m.chat.id) not in users:
        users.append(str(m.chat.id))
        balances.append(start_balance)
    user_index=users.index(str(m.chat.id))
    balance=balances[user_index]
    file_write_users=''
    for i in range(0,len(users)):
        file_write_users+=users[i]+","+balances[i]+"\n"
    users_balances_lines=open(balance_path,"w")
    users_balances_lines.write(file_write_users)
    users_balances_lines.close()
    bot.send_message(m.chat.id, '–¢–≤–æ–π –±–∞–ª–∞–Ω—Å-'+balance)

@bot.message_handler(commands=['friend'])
def referal_link(message):
    keyboard=types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    begin_button = types.KeyboardButton(text='/begin')
    keyboard.add(begin_button)
    bot.send_message(message.chat.id,"https://t.me/Animagram_bot?start="+str(message.chat.id)+"\n–ï—Å–ª–∏ –ø—Ä–∏–≤–µ–¥–µ—à—å –¥—Ä—É–≥–∞,—Ç–æ –ø–æ–ª—É—á–∏—à—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", reply_markup=keyboard)

@bot.message_handler(commands=['begin'])
def add_model(message):
    keyboard=types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    alphaModel_button = types.KeyboardButton(text='mixpro')
    betaModel_button = types.KeyboardButton(text='darksushi')
    keyboard.add(alphaModel_button,betaModel_button)
    msg=bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å", reply_markup=keyboard)
    bot.register_next_step_handler(msg, add_resolution,message.text)

def add_resolution(message,value):
    keyboard=types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    res1_button = types.KeyboardButton(text='16:9')
    res2_button = types.KeyboardButton(text='9:16')
    res3_button = types.KeyboardButton(text='1:1')
    keyboard.add(res3_button,res2_button,res1_button)
    msg=bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", reply_markup=keyboard)
    bot.register_next_step_handler(msg, add_prompt,message.text)

def add_prompt(message,value):
    keyboard=types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    msg=bot.send_message(message.chat.id,"–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å", reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, send_to_send,value+' '+message.text)

def send_to_send(message,value):
    prompt=value+" "+message.text
    print(prompt)
    send_generate(prompt,message.chat.id,message.from_user.username)

def send_generate(prompt,userID,userNAME):
    user_mes=emoji.demojize(prompt)
    user_mes=user_mes.replace("\n"," ")
    users_balances_lines=open(balance_path,"r")
    users_balances=users_balances_lines.readlines()
    users_balances_lines.close()
    users=[]
    balances=[]
    for i in users_balances:
        lines_user=i.split(",")
        users.append(lines_user[0])
        balances.append((lines_user[1])[:-1])
    if str(userID) not in users:
        users.append(str(userID))
        balances.append(start_balance)
    user_index=users.index(str(userID))
    balance=int(balances[user_index])
    if userID in block :
        print(123)
    elif '\n' in user_mes:
        bot.send_message(userID,"–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É(–ò–ù–ê–ß–ï –ü–†–û–ò–ó–û–ô–î–ï–¢ –ê–ü–û–ö–ê–õ–ò–ü–°–ò–°!!!11!!) \n–ü–æ—Ç–æ–º —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—é")
    elif len(user_mes)<2 :
        bot.send_message(userID,"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ 3 —Å–∏–º–≤–æ–ª–∞")
    elif len(user_mes)>7000:
        bot.send_message(userID,"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ 7000 —Å–∏–º–≤–æ–ª–æ–≤")
    elif userID in white and user_mes=="key123123":
        print("00")

        if activator[0]==1:
            bot.send_message(userID,"üëé")
            activator[0]=0
        else:
            bot.send_message(userID,"üëç")
            activator[0]=1
    elif not(bot.get_chat_member(-1001968288775, userID).status in "member,creator,administrator"):
        bot.send_message(userID,"–°–ø–µ—Ä–≤–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª \nhttps://t.me/animagram_group")
    elif activator[0]==1 and bot.get_chat_member(-1001968288775, userID).status in "member,creator,administrator":
        anima_queue=open(queue_path,"r")
        anima_queue_readlines=anima_queue.readlines()
        if ((str(userID)+"\n" not in anima_queue_readlines) and (str(userID) in users) and (balance>0)):
            bot.send_message(userID,"–í—ã –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å \n–ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: "+str(len(anima_queue_readlines)+1)+"\n"+"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: "+str((len(anima_queue_readlines)+1)//2+(len(anima_queue_readlines)+1)%2)+" –º–∏–Ω")
            anima_queue.close()
            counter_images[0]+=1
            anima_user_log=open(user_log_path,"a")
            anima_user_log.write(str(time.strftime("%m/%d/%Y, %H:%M:%S", time.localtime()))+": "+str(userNAME)+"___"+str(userID)+"___"+user_mes+"-"+str(counter_images[0])+"\n")
            anima_user_log.close()

            anima_queue=open(queue_path,"a")
            anima_queue.write(str(userID)+"\n")
            anima_queue.close()

            anima_user_prompt=open(prompt_path,"a")
            anima_user_prompt.write(str(user_mes)+"\n")
            anima_user_prompt.close()

            file_write_users=''
            for i in range(0,len(users)):
                file_write_users+=users[i]+","+balances[i]+"\n"
            users_balances_lines=open(balance_path,"w")
            users_balances_lines.write(file_write_users)
            users_balances_lines.close()
        elif balance==0:
            bot.send_message(userID,"–ù–∞ –°–ï–ì–û–î–ù–Ø –±–∞–ª–∞–Ω—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è\n\n–ù–æ —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –∑–∞–¥–æ–Ω–∞—Ç–∏—à—å –∞–¥–º–∏–Ω—É - @wildwoodrogue")
            anima_queue.close()
        else:
            bot.send_message(userID,"–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏. –û–∂–∏–¥–∞–π—Ç–µ")
            anima_queue.close()
    if  [i for i in rus if i in user_mes.lower()]:
        bot.send_message(userID,"–ë–æ—Ç —Ç—É–ø–µ–Ω—å–∫–∏–π, –ø–æ–Ω–∏–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ–ª—å–∑—É–π—Å—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º, –µ—Å–ª–∏ –Ω–∞–¥–æ")
        # create_image(user_mes)
        # image=open("P:\\stable\\pictures\\"+user_mes+".png","rb")
    keyboard=types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    begin_button = types.KeyboardButton(text='/begin')
    keyboard.add(begin_button)
    msg=bot.send_message(userID,"'/begin' - —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup=keyboard)


while True:
    try:
        bot.polling(non_stop=True, interval=0)
    except Exception as e:
        print(e)
        time.sleep(1)
        continue
